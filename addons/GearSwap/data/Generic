--[[ Generic file
			Creator: 
			Server
			Funcitons:
]]
----------------------------------------------
--  Initialization function required for    --
--          this to work properly           --
----------------------------------------------
  function get_sets() 
    mote_include_version = 2
  --Load and initialize the include file
    include('Mote-Include.lua')
  end 
------------------------------------------
-- Initialization of the various job 		--
-- Binds for the differnt modes					--
------------------------------------------
	function job_binds()
  --[[ F9-F12 keybinds ]]
		send_command('bind f9 gs c cycle IdleMode')
		send_command('bind f10 gs c cycle OffenseMode')
		send_command('bind f11 gs c cycle HybridMode')
		send_command('bind f12 gs c cycle CastingMode')
	--[[ AltF9-AltF12 keybinds ]]
		send_command('bind !f9 gs c cycle Empty')
		send_command('bind !f10 gs c cycle DarkSealMode')
		send_command('bind !f11 gs c toggle LastResortMode')
		send_command('bind !f12 gs c toggle SouleaterMode')
		send_command('bind != gs c toggle CapacityMode')
	--[[ CtrlF9-CtrlF12 keybinds ]]
		send_command('bind ^f9 gs c cycle Empty')
		send_command('bind ^f10 gs c cycle Empty')
		send_command('bind ^f11 gs c cycle Empty')
		send_command('bind ^f12 gs c cycle Empty')
	--[[ WindowsF9-WindowsF12 keybinds ]]
		send_command('bind @f9 gs c set mainWeapon Apocalypse')
		send_command('bind @f10 gs c set mainWeapon Liberator')
		send_command('bind @f11 gs c set mainWeapon Ragnarok')
		send_command('bind @f12 gs c set mainWeapon Caladbolg')
  end 
--------------------------
--  Job Setup Section   --
--------------------------
	function job_setup()
  	state.mainWeapon = M{'Replace with Weapon of choice'}
  	oneHandList = S{'replace with your weapons'}
  	twoHandList = S{'replace with your weapons'}
  	scytheList = S{'replace with your weapons'}
  --[[Correction to errors in Mote Libs]]
  	absorbs = S{ 
			'Absorb-STR', 'Absorb-DEX', 'Absorb-VIT', 
			'Absorb-AGI', 'Absorb-INT', 'Absorb-MND', 
			'Absorb-CHR', 'Absorb-ACC', 'Absorb-TP',
			'Absorb-Attri'
		}
  --[[ Moonshade earring and Gav. Helmet ]]
		moonshade_WS = S{
			"Resolution", "Torcleaver", "Catastrophe", 
			"Cross Reaper", "Quietus", "Entropy", "Insurgency", "Savage Blade", "Vorpal Blade", "Requiescat", 
			'Sanguine Blade'
		}
		gav_ws = S{
			"Torcleaver","Resolution","Catastrophe",
			"Scourge","Cross Reaper"
		}
  --[[ Nuking sets ]]
		LowTierNuke = S{
			'Stone', 'Stone II', 'Stone III', 
			'Stonega', 'Stonega II',
			'Water', 'Water II', 'Water III', 
			'Waterga', 'Waterga II',
			'Aero', 'Aero II', 'Aero III', 
			'Aeroga', 'Aeroga II',
			'Fire', 'Fire II', 'Fire III', 
			'Firaga', 'Firaga II',
			'Blizzard', 'Blizzard II', 'Blizzard III', 
			'Blizzaga', 'Blizzaga II',
			'Thunder', 'Thunder II', 'Thunder III', 
			'Thundaga', 'Thundaga II'
		}
  end 
--------------------------
--  User Setup Section  --
--------------------------
	function user_setup()
  	state.IdleMode:options('Normal', 'PDT', 'MagicEva')
  	state.OffenseMode:options('Normal', 'Mid', 'Acc')
  	state.HybridMode:options('Normal', 'MagicEva', 'DT')
  	state.ReRaiseMode:options('Normal', 'Reraise')
  	state.WeaponskillMode:options('Normal', 'Mid', 'Acc')
  	state.CastingMode:options('Normal', 'Resistant', 'Enmity')
  --[[ User Created states ]]
  	state.SouleaterMode = M(false, 'Soul Eater Mode')
		state.LastResortMode = M(false, 'Last Resort Mode')
		state.DarkSealMode:options('None', 'DarkSeal')
  --[[ Loading of various functions ]]
  	get_player_hp()
  	job_update()
  	select_default_macro_book()
  	set_lockstyle()
  	job_binds()
  end 
	function get_player_name()
  	if windower.ffxi.get_player() then 
    	self = windower.ffxi.get_player().name
    	roll = windower.ffxi.get_player().main_job_full
    	windower.add_to_chat(7, 'Hello '..self..' your '..roll..' LUA is now loaded')
    	windower.add_to_char(7, 'The gerbils are fetching your '..roll..' Lockstyle!')
    end 
  end
--------------------------------------------------
--  This section is called when you change jobs --
--------------------------------------------------
	function file_unload()
	--[[ F9-F12 unbind's ]]
		send_command('unbind f9')
		send_command('unbind f10')
		send_command('unbind f11')
		send_command('unbind f12')
	--[[ AltF9-AltF12 unbind's ]]
		send_command('unbind !f9')
		send_command('unbind !f10')
		send_command('unbind !f11')
		send_command('unbind !f12')
		send_command('unbind !=')
	--[[ CtrlF9-CtrlF12 unbind's ]]
		send_command('unbind ^f9')
		send_command('unbind ^f10')
		send_command('unbind ^f11')
		send_command('unbind ^f12')
	--[[ WindowsF9-WindowsF12 unbind's ]]
		send_command('unbind @f9')
		send_command('unbind @f10')
		send_command('unbind @f11')
		send_command('unbind @f12')
  end 
----------------------------------------------
--  This tells Gear swap what sets to fetch  --
--  Recommend creating a Car file.          --
----------------------------------------------
	function init_gear_sets()
	
	end 
-----------------------------------------
-- Checking Player HP for Hybird modes --	
-----------------------------------------
	function getHp()
  	i = windower.ffxi.get_player().hpp 
    	if i < 60 then 
      	state.HybridMode:set('DT')
      elseif i < 53 then 
    		state.HybridMode:set('Reraise')
    	elseif i > 51 then 
    		state.HybridMode:set('Normal')
    	end 
  end 
---------------------------
--  Custom Idle Gear set --
---------------------------	
	function customize_idle_set(idleSet)
  	if state.HybridMode.value == "DT" then 
    	idleSet = set_combine(idleSet, sets.DT)
    	add_to_chat(7, 'Your HP is at '..player.hpp..' equiping you DT set')
    end 
  	if state.HybridMode.value == 'Reraise' then 
			idleSet = set_combine(idleSet, sets.Reraise)
			add_to_chat(7,'Death is iminent hp is at '..player.hpp..' equiping re-raise set')
		end 
  	if state.IdleMode.value == "PDT" then 
    	idleSet = set_combine(idleSet, sets.idle.PDT)
    end
  	if state.IdleMode.value == "MagicEva" then 
    	idleSet = set_combine(idleSet, sets.idle.MagicEva)
    end 
  	if state.CapacityMode.value then 
    	idleSet = set_combine(idleSet, sets.CapacityMantle)
    end 
  	if buffactive['Weakness'] then 
    	equip({head="Twilight helm", body="Twilight mail"})
			disable('Head', 'Body')
			add_to_chat(8, 'Weakness detected - Locking Helm and Body')
		else 
			enable('Head', 'Body')
    end 
  	if S{"Eastern Adoulin","Western Adoulin"}:contains(world.area) then
			idleSet = set_combine(idleSet,{body="Councilor's Garb"})
		end
  	return idleSet
  end 
-------------------------------
--  Custom Melee Gear set    --
-------------------------------
	function customize_melee_set(meleeSet)
  	if state.HybridMode.value == "DT" then 
    	meleeSet = set_combine(meleeSet, sets.DT)
    	add_to_chat(7, 'Your HP is at '..player.hpp..' equiping you DT set')
    end 
  	if state.HybridMode.value == 'Reraise' then 
			meleeSet = set_combine(meleeSet, sets.Reraise)
			add_to_chat(7,'Death is iminent hp is at '..player.hpp..' equiping re-raise set')
		end 
  	if state.IdleMode.value == "PDT" then 
    	meleeSet = set_combine(meleeSet, sets.idle.PDT)
    end
  	if state.IdleMode.value == "MagicEva" then 
    	meleeSet = set_combine(meleeSet, sets.idle.MagicEva)
    end 
  	if state.CapacityMode.value then 
    	meleeSet = set_combine(meleeSet, sets.CapacityMantle)
    end 
  	if buffactive['Weakness'] then 
    	equip({head="Twilight helm", body="Twilight mail"})
			disable('Head', 'Body')
			add_to_chat(8, 'Weakness detected - Locking Helm and Body')
		else 
			enable('Head', 'Body')
    end
  	return meleeSet
  end 
----------------------------------------------
--  General hooks for setting combat state  --
----------------------------------------------
  ------------------------------------------------------------------
  --  Called by the 'update' self-command, for common needs.      --
  --  Set eventArgs.handled to true if we don't want automatic    --
  --  equipping of gear.                                          --
  ------------------------------------------------------------------
	function job_update(cmdParams, eventArgs)
  	job_status_change()
		get_combat_form()
		get_combat_weapon()
		job_state_change()
		update_melee_groups()
  end 
	function job_status_change(newStatus, oldStatus, eventArgs)
  	if newStatus == "Engaged" then 
    	-- handle weapon sets
			if gsList:contains(player.equipment.main) then
				state.CombatWeapon:set('GreatSword')
			elseif scytheList:contains(player.equipment.main) then
				state.CombatWeapon:set('Engaged')
			elseif player.equipment.main == 'Ragnarok' then
				state.CombatWeapon:set('Ragnarok')
			elseif player.equipment.main == 'Apocalypse' then
				state.CombatWeapon:set('Apocalypse')
			elseif player.equipment.main == 'Caladbolg' then
				state.CombatWeapon:set('Caladbolg')
			end
    end 
  end 
	function get_combat_form()
  
  end 
	function get_combat_weapon()
  	if state.mainWeapon.value == "Apocalypse" then 
			equip({main="Apocalypse", sub="Tzacab grip"})
			set_macro_page(2, 6)
		elseif state.mainWeapon.value == "Ragnarok" then 
			equip({main="Ragnarok", sub="Bloodrain strap"})
			set_macro_page(3, 6)
		elseif state.mainWeapon.value == "Caladbolg" then 
			equip({main="Caladbolg", sub="Bloodrain strap"})
			set_macro_page(1, 6) 
		end
		if gsList:contains(player.equipment.main) then
			state.CombatWeapon:set("GreatSword")
		elseif scytheList:contains(player.equipment.main) then
			state.CombatWeapon:set("Engaged")
		elseif player.equipment.main == 'Apocalypse' then
			state.CombatWeapon:set('Apocalypse')
		elseif player.equipment.main == 'Ragnarok' then
			state.CombatWeapon:set('Ragnarok')
		elseif player.equipment.main == 'Caladbolg' then
			state.CombatWeapon:set('Caladbolg')
		else -- use regular set, which caters to Liberator
			--state.CombatWeapon:reset()
		end	
		return get_combat_weapon
  end 
	function job_state_change() 
  
  end 
	function update_melee_group()
  
  end 
-----------------------
-- Pre-cast section  --
-----------------------
	function job_precast(spell, action, spellMap, eventArgs)
  
  end 
	function job_post_precast(spell, spellMap, eventArgs)
  
  end 
-----------------------
--  Mid-cast Section --
-----------------------
	function job_midcast(spell, spellMap, eventArgs)
  
  end
	function job_post_midcast(spell, spellMap, eventArgs)
  
  end 
-------------------------
--  after-cast Section --
-------------------------
	function job_aftercast(spell, spellMap, eventArgs)
  
  end 
	function job_post_aftercast(spell, spellMap, eventArgs)
  
  end 
------------------------------------------------------------------
-- Called when a player gains or loses a buff.                  --
-- buff == buff gained or lost                                  --
-- gain == true if the buff was gained, false if it was lost.   --
------------------------------------------------------------------	
	function job_buff_change(buff, gain)	
  	if state.Buff[buff] ~= nil then
			state.Buff[buff] = gain
			handle_equipping_gear(player.status)
		end
  end 
